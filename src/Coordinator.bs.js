// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var React = require("react");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Card$ReactTemplate = require("./Card.bs.js");
var Player$ReactTemplate = require("./Player.bs.js");

var component = ReasonReact.reducerComponent("Coordinator");

function make(blackCards, whiteCards, _children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var currentCard = List.hd(self[/* state */1][/* blackStack */1][/* available */0]);
              var players = List.map((function (p) {
                      return ReasonReact.element(undefined, undefined, Player$ReactTemplate.make(p[/* id */0], p[/* name */3], /* array */[]));
                    }), self[/* state */1][/* players */0]);
              return React.createElement("div", undefined, ReasonReact.element(undefined, undefined, Card$ReactTemplate.make(currentCard, /* Black */1, /* array */[])), $$Array.of_list(players), React.createElement("form", undefined, React.createElement("input", {
                                  placeholder: "New Player Name"
                                })));
            }),
          /* initialState */(function (param) {
              return /* record */[/* game : record */[
                        /* players : [] */0,
                        /* blackStack : record */[
                          /* available */blackCards,
                          /* color : Black */1
                        ],
                        /* whiteStack : record */[
                          /* available */whiteCards,
                          /* color : White */0
                        ],
                        /* currentPlayer */0
                      ]];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (action) {
                return /* Update */Block.__(0, [/* record */[
                            /* players */List.append(state[/* players */0], /* :: */[
                                  action[0],
                                  /* [] */0
                                ]),
                            /* blackStack */state[/* blackStack */1],
                            /* whiteStack */state[/* whiteStack */2],
                            /* currentPlayer */state[/* currentPlayer */3]
                          ]]);
              } else {
                var stack = List.tl(state[/* blackStack */1][/* available */0]);
                var init = state[/* blackStack */1];
                return /* Update */Block.__(0, [/* record */[
                            /* players */state[/* players */0],
                            /* blackStack : record */[
                              /* available */stack,
                              /* color */init[/* color */1]
                            ],
                            /* whiteStack */state[/* whiteStack */2],
                            /* currentPlayer */state[/* currentPlayer */3]
                          ]]);
              }
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.component = component;
exports.make = make;
/* component Not a pure module */
